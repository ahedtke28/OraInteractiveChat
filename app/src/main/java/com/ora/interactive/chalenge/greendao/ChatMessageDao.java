package com.ora.interactive.chalenge.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ora.interactive.chalenge.greendao.ChatMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CHAT_MESSAGE.
*/
public class ChatMessageDao extends AbstractDao<ChatMessage, Long> {

    public static final String TABLENAME = "CHAT_MESSAGE";

    /**
     * Properties of entity ChatMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property KChatId = new Property(1, Integer.class, "kChatId", false, "K_CHAT_ID");
        public final static Property KMessageId = new Property(2, Integer.class, "kMessageId", false, "K_MESSAGE_ID");
        public final static Property KSenderId = new Property(3, Integer.class, "kSenderId", false, "K_SENDER_ID");
        public final static Property KMessage = new Property(4, String.class, "kMessage", false, "K_MESSAGE");
        public final static Property KUserName = new Property(5, String.class, "kUserName", false, "K_USER_NAME");
    };

    private DaoSession daoSession;


    public ChatMessageDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHAT_MESSAGE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'K_CHAT_ID' INTEGER," + // 1: kChatId
                "'K_MESSAGE_ID' INTEGER," + // 2: kMessageId
                "'K_SENDER_ID' INTEGER," + // 3: kSenderId
                "'K_MESSAGE' TEXT," + // 4: kMessage
                "'K_USER_NAME' TEXT);"); // 5: kUserName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHAT_MESSAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChatMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer kChatId = entity.getKChatId();
        if (kChatId != null) {
            stmt.bindLong(2, kChatId);
        }
 
        Integer kMessageId = entity.getKMessageId();
        if (kMessageId != null) {
            stmt.bindLong(3, kMessageId);
        }
 
        Integer kSenderId = entity.getKSenderId();
        if (kSenderId != null) {
            stmt.bindLong(4, kSenderId);
        }
 
        String kMessage = entity.getKMessage();
        if (kMessage != null) {
            stmt.bindString(5, kMessage);
        }
 
        String kUserName = entity.getKUserName();
        if (kUserName != null) {
            stmt.bindString(6, kUserName);
        }
    }

    @Override
    protected void attachEntity(ChatMessage entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChatMessage readEntity(Cursor cursor, int offset) {
        ChatMessage entity = new ChatMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // kChatId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // kMessageId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // kSenderId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // kMessage
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // kUserName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChatMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKChatId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setKMessageId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setKSenderId(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setKMessage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setKUserName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChatMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChatMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
